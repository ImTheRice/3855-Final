version: '2.1'

services:
  zookeeper:
    image: wurstmeister/zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
    volumes:
      - /home/azureuser/zookeeper/data:/opt/zookeeper-3.4.13/data
    healthcheck:
      test: ["CMD", "bash", "-c", "echo ruok | nc localhost 2181 | grep imok"]
      interval: 10s
      timeout: 10s
      retries: 10
    networks:
      - api.network  
    restart: "always"

  kafka:
    image: wurstmeister/kafka
    command: [start-kafka.sh]
    ports:
      - "9092:9092"
    depends_on:
      zookeeper:
        condition: service_healthy
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: PLAINTEXT://:9092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_LOG_DIRS: /kafka/kafka-logs
      KAFKA_CREATE_TOPICS: "event_log:1:1"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - /home/azureuser/kafka:/kafka/kafka-logs
    healthcheck:
      test: ["CMD", "bash", "-c", "/opt/kafka/bin/kafka-broker-api-versions.sh --bootstrap-server=localhost:9092"]
      interval: 10s
      timeout: 10s
      retries: 10
    networks:
      - api.network  
    restart: "always"

  receiver_v5:
    build: ../ReceiverV5
    ports:
      - "8080"
    environment:
      - TARGET_ENV=test
    volumes:
      - /home/azureuser/config/receiver:/config
      - /home/azureuser/logs:/logs
    depends_on:
      kafka:
        condition: service_healthy
    networks:
      - api.network  
    restart: "always"

  audit_v1:
    build: ../AuditV1
    ports:
      - "8110"
    environment:
      - TARGET_ENV=test
    volumes:
      - /home/azureuser/config/audit_log:/config
      - /home/azureuser/logs:/logs
    depends_on:
      kafka:
        condition: service_healthy
    networks:
      - api.network  
    restart: "always"

  processing_v2:
    build: ../ProcessingV2
    ports:
      - "8100"
    environment:
      - TARGET_ENV=test
    volumes:
      - /home/azureuser/config/processing:/config
      - /home/azureuser/logs:/logs
      - processing-db:/data
    depends_on:
      kafka:
        condition: service_healthy
    networks:
      - api.network  
    restart: "always"

  storage_v4:
    build: ../Storagev4
    ports:
      - "8090"
    environment:
      - TARGET_ENV=test
    volumes:
      - /home/azureuser/config/storage:/config
      - /home/azureuser/logs:/logs
    depends_on:
      db:
        condition: service_started
      kafka:
        condition: service_healthy
    networks:
      - api.network  
    restart: "always"

  db:
    image: mysql:5.7
    ports:
      - "3306:3306"
    environment:
      MYSQL_ROOT_PASSWORD: password
      MYSQL_DATABASE: events
      MYSQL_USER: superbaddefault
      MYSQL_PASSWORD: superbaddefault
    volumes:
      - db-data:/var/lib/mysql
    networks:
      - api.network  
    restart: "always"

  dashboard:
    build: ../DashboardV1
    ports:
      - "3000:3000"
    depends_on:
      processing_v2:
        condition: service_started
      audit_v1:
        condition: service_started
    networks:
      - api.network   
    restart: "always"
    

  nginx:
      image: nginx:latest
      ports:
        - "80:80"
      volumes:
        - /home/azureuser/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      depends_on:        
        - receiver_v5
        - storage_v4
        - processing_v2
        - audit_v1
        - dashboard
        - event_logger_v1
      networks:
        - api.network
      restart: always

  event_logger_v1:
    build: ../EventLoggerV1 
    ports:
      - "8120" 
    environment:
      - TARGET_ENV=test 
    volumes:
      - /home/azureuser/logs:/logs 
      - /home/azureuser/config/event_logger:/config
      - /home/azureuser/event_logger/data:/data 
    depends_on:
      kafka:
        condition: service_healthy 
    networks:
      - api.network 
    restart: "always" 

  anomoaly_v1:
    build: ../AnomalyV1
    ports:
      - "8100"
    environment:
      - TARGET_ENV=test
    volumes:
      - /home/azureuser/config/anomoaly:/config
      - /home/azureuser/logs:/logs
      - /home/azureuser/anomoaly/data:/data 
    depends_on:
      kafka:
        condition: service_healthy
      processing_v2:
        condition: service_started
      audit_v1:
        condition: service_started
      storage_v4:
        condition: service_started
    networks:
      - api.network  
    restart: "always"

networks:
  api.network:

volumes:
  db-data:
  processing-db:
  event-data:
